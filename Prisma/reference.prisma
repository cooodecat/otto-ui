// Enums (추정 정의, 실제 DB enum에 맞게 수정 필요)
enum LogLevel {
    DEBUG
    INFO
    WARN
    ERROR
}

enum CollectionStatus {
    ACTIVE
    STOPPED
    ERROR
}

model build_execution_phases {
    id                     String    @id @default(uuid()) /// 고유 ID
    build_history_id       String /// build_histories 테이블 FK
    phase_type             String /// 빌드 단계 타입
    phase_status           String /// 단계 상태
    phase_start_time       DateTime? /// 단계 시작 시간
    phase_end_time         DateTime? /// 단계 종료 시간
    phase_duration_seconds Int? /// 단계 소요 시간(초)
    phase_context_message  String? /// 단계 관련 메시지
    created_at             DateTime  @default(now()) /// 생성 시각

    build_histories build_histories @relation(fields: [build_history_id], references: [id])
}

model build_histories {
    id                     String    @id @default(uuid()) /// 고유 ID
    user_id                String /// 사용자 ID (auth.users FK)
    project_id             String /// 프로젝트 ID
    aws_build_id           String    @unique /// AWS 빌드 ID
    build_execution_status String    @default("pending") /// 빌드 상태 (pending, in_progress, etc.)
    build_spec             Json /// 빌드 스펙 (jsonb)
    environment_variables  Json? /// 환경 변수 (jsonb)
    start_time             DateTime? /// 빌드 시작 시간
    end_time               DateTime? /// 빌드 종료 시간
    duration_seconds       Int? /// 빌드 소요 시간(초)
    logs_url               String? /// 로그 URL
    build_error_message    String? /// 에러 메시지
    created_at             DateTime  @default(now()) /// 생성 시각
    updated_at             DateTime  @default(now()) /// 수정 시각

    build_execution_phases build_execution_phases[]
}

model github_installations {
    installation_id        String   @id @default(uuid()) /// 설치 ID
    user_id                String /// 사용자 ID (auth.users FK)
    account_id             String /// GitHub 계정 ID
    account_login          String /// GitHub 계정 로그인
    account_type           String /// 계정 타입 (User/Org)
    github_installation_id String   @unique /// GitHub Installation ID
    is_active              Boolean  @default(true) /// 활성 여부
    created_at             DateTime @default(now()) /// 생성 시각
    updated_at             DateTime @default(now()) /// 수정 시각
}

model job_execution_logs {
    id           String   @id @default(uuid()) /// 고유 ID
    execution_id String   @unique /// 실행 ID
    event_id     String   @unique /// 이벤트 ID
    timestamp    DateTime /// 로그 발생 시각
    phase        String? /// 실행 단계
    state        String? /// 상태
    level        LogLevel /// 로그 레벨
    message      String /// 메시지
    log_stream   String? /// 로그 스트림
    raw_data     Json? /// 원본 데이터
    created_at   DateTime @default(now()) /// 생성 시각
}

model job_executions {
    id           String    @id @default(uuid()) /// 고유 ID
    execution_id String    @unique @default("") /// 실행 ID
    provider     String    @default("") /// 제공자 (예: codebuild)
    external_id  String    @unique @default("") /// 외부 실행 ID (CodeBuild 등)
    project_name String    @default("") /// 프로젝트 이름
    status       String? /// 상태
    started_at   DateTime /// 시작 시간
    ended_at     DateTime? /// 종료 시간
    created_at   DateTime  @default(now()) /// 생성 시각
}

model log_collection_state {
    execution_id      String           @id /// 실행 ID
    last_token        String /// 마지막 토큰
    last_collected_at DateTime? /// 마지막 수집 시간
    collection_status CollectionStatus /// 수집 상태
    error_message     String /// 에러 메시지
    updated_at        DateTime         @default(now()) /// 수정 시각
}

model pipeline {
    pipeline_id String   @id @default(uuid()) /// 파이프라인 ID
    created_at  DateTime @default(now()) /// 생성 시각
    data        Json? /// 파이프라인 데이터
    env         Json? /// 환경 변수
    project_id  String? /// 프로젝트 ID

    projects projects? @relation(fields: [project_id], references: [project_id])
}

model profiles {
    id              String   @id /// 사용자 ID (auth.users FK)
    username        String?  @unique /// 유저명
    display_name    String? /// 표시 이름
    bio             String? /// 소개
    avatar_url      String? /// 아바타 URL
    github_username String? /// GitHub 유저명
    github_id       String? /// GitHub ID
    created_at      DateTime @default(now()) /// 생성 시각
    updated_at      DateTime @default(now()) /// 수정 시각
}

model projects {
    project_id              String        @id @default(uuid()) /// 프로젝트 ID
    name                    String        @unique /// 프로젝트 이름
    description             String? /// 설명
    github_owner            String /// GitHub 소유자
    github_repo_id          String        @unique /// GitHub Repo ID
    github_repo_name        String /// GitHub Repo 이름
    github_repo_url         String /// GitHub Repo URL
    installation_id         String? /// GitHub Installation ID
    user_id                 String /// 사용자 ID
    selected_branch         String        @default("main") /// 선택 브랜치
    created_at              DateTime      @default(now()) /// 생성 시각
    updated_at              DateTime      @default(now()) /// 수정 시각
    codebuild_project_name  String?       @unique /// CodeBuild 프로젝트 이름
    build_image             String        @default("aws/codebuild/standard:7.0") /// CodeBuild 이미지
    compute_type            String        @default("BUILD_GENERAL1_MEDIUM") /// 빌드 컴퓨팅 타입
    build_timeout           Int           @default(60) /// 빌드 제한 시간 (분)
    artifact_bucket         String?       @unique /// 아티팩트 버킷
    artifact_retention_days Int?          @default(7) /// 아티팩트 보존 기간 (일)
    cloudwatch_log_group    String?       @unique /// CloudWatch 로그 그룹
    codebuild_status        String?       @default("PENDING") /// CodeBuild 상태
    codebuild_error_message String? /// CodeBuild 에러 메시지
    pipeline                pipeline[]
    push_events             push_events[]
}

model push_events {
    event_id           String   @id @default(uuid()) /// 이벤트 ID
    project_id         String /// 프로젝트 ID
    commit_sha         String /// 커밋 SHA
    commit_message     String? /// 커밋 메시지
    commit_author_name String? /// 커밋 작성자 이름
    pushed_at          DateTime /// 푸시 시간
    branch_name        String? /// 브랜치 이름
    created_at         DateTime @default(now()) /// 생성 시각

    projects projects @relation(fields: [project_id], references: [project_id])
}
